/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package de.edittrich.oauth2.data.api;

import de.edittrich.oauth2.data.model.CodeData;
import de.edittrich.oauth2.data.model.ResponseError;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-07-28T15:37:24.170Z")

@Api(value = "codes", description = "the codes API")
public interface CodesApi {

    @ApiOperation(value = "", notes = "Deletes OAuth2 authorization data for a given code", response = Void.class, tags={ "Data", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Created", response = Void.class),
        @ApiResponse(code = 400, message = "Unexpected error", response = ResponseError.class) })
    
    @RequestMapping(value = "/codes/{code}",
        method = RequestMethod.DELETE)
    ResponseEntity<?> codeDELETE(@ApiParam(value = "OAuth2 authorization code",required=true ) @PathVariable("code") String code);


    @ApiOperation(value = "", notes = "Provides OAuth2 authorization data for a given code", response = CodeData.class, tags={ "Data", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CodeData.class),
        @ApiResponse(code = 400, message = "Unexpected error", response = ResponseError.class) })
    
    @RequestMapping(value = "/codes/{code}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> codeGET(@ApiParam(value = "OAuth2 authorization code",required=true ) @PathVariable("code") String code);


    @ApiOperation(value = "", notes = "Stores OAuth2 authorization data for a given code", response = Void.class, tags={ "Data", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = Void.class),
        @ApiResponse(code = 400, message = "Unexpected error", response = ResponseError.class) })
    
    @RequestMapping(value = "/codes/{code}",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> codePOST(@ApiParam(value = "OAuth2 authorization code",required=true ) @PathVariable("code") String code,@ApiParam(value = "OAuth2 authorization code"  )  @Valid @RequestBody CodeData codeData);

}
